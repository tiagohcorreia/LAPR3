@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Algorithms {
  + Algorithms(): 
  + shortestPathDijkstra(Graph<V, E>, V, Comparator<E>, BinaryOperator<E>, E, boolean[], List<V>, List<E>): void
  - breadthFirstSearch(Graph<V, E>, V, boolean[], List<V>): void
  + BreadthFirstSearch(Graph<V, E>, V): LinkedList<V>
  - getVertMinDist(List<E>, boolean[], Comparator<E>, E): int
  + getPath(Graph<V, E>, V, V, List<V>, LinkedList<V>): void
  + totalGraphDistance(Graph<V, E>): Double
  + shortestPath(Graph<V, E>, V, V, Comparator<E>, BinaryOperator<E>, E, LinkedList<V>): E
  + shortestPath(Graph<V, E>, V, V, LinkedList<V>): boolean
  + kruskalMST(Graph<V, E>): MapGraph<V, E>
  - allPaths(Graph<V, E>, V, V, boolean[], LinkedList<V>, ArrayList<LinkedList<V>>): void
  + shortestPaths(Graph<V, E>, V, Comparator<E>, BinaryOperator<E>, E, ArrayList<LinkedList<V>>, ArrayList<E>): boolean
  + primMST(Graph<V, E>, E, Comparator<E>): MapGraph<V, E>
  + DepthFirstSearch(Graph<V, E>, V): LinkedList<V>
  - DepthFirstSearch(Graph<V, E>, V, boolean[], LinkedList<V>): void
  - buildMST(Graph<V, E>, ArrayList<V>, ArrayList<E>, E): void
  + shortestPaths(Graph<V, E>, V, ArrayList<LinkedList<V>>): boolean
  + allPaths(Graph<V, E>, V, V): ArrayList<LinkedList<V>>
}
class AlgorithmsAlternative {
  + AlgorithmsAlternative(): 
  + getPath(Graph<V, E>, V, V, List<V>, List<V>): void
  + removeDuplicates(LinkedList<V>): void
  + clean(LinkedList<V>, V): void
  + removeElementsAfter(LinkedList<V>, V): void
}
class CalculateMinimumSpanningTree {
  + CalculateMinimumSpanningTree(): 
  + calculateMinimumSpanningTreeWithKruskal(Graph<Local, Integer>): ReturnData?
}
class CentralityComparator<V> {
  + CentralityComparator(): 
  + compare(Entry<V, Integer>, Entry<V, Integer>): int
}
class CommonGraph<V, E> {
  + CommonGraph(boolean): 
  # isDirected: boolean
  + key(V): int
  + vertices(): ArrayList<V>
  + hashCode(): int
  + numVertices(): int
  + clone(): Graph<V, E>
  + vertex(Predicate<V>): V
  + validVertex(V): boolean
  # copy(Graph<V, E>, Graph<V, E>): void
  + equals(Object): boolean
  + numEdges(): int
  + vertex(int): V
   isDirected: boolean
}
class Distance {
  + Distance(Local, Local, double): 
  - local2: Local
  - lenght: double
  - local1: Local
  + equals(Object): boolean
  + hashCode(): int
  + toString(): String
   local2: Local
   local1: Local
   lenght: double
}
class Edge<V, E> {
  + Edge(V, V, E): 
  - weight: E
  + equals(Object): boolean
  + hashCode(): int
  + toString(): String
   VDest: V
   VOrig: V
   weightDouble: double
   weight: E
}
class FurthestPlacesData {
  + FurthestPlacesData(Local, Local, double, LinkedList<Local>, double, List<Local>, List<Distance>, int, int): 
  + FurthestPlacesData(): 
  - local2: Local
  - shortPath: List<Local>
  - local1: Local
  - distanceBetweenLocals: List<Distance>
  - vehicleChargeStops: List<Local>
  - vehiclesStops: int
  - vehicleAutonomy: double
  - numberOfTimesVehicleWasCharged: int
  - distanceFromOriginToDestination: double
  + hashCode(): int
  + toString(): String
  + equals(Object): boolean
   distanceFromOriginToDestination: double
   numberOfTimesVehicleWasCharged: int
   shortPath: List<Local>
   vehicleChargeStops: List<Local>
   vehiclesStops: int
   vehicleAutonomy: double
   local2: Local
   local1: Local
   distanceBetweenLocals: List<Distance>
}
class GPS {
  + GPS(): 
  + GPS(String): 
  + GPS(double, double): 
  - latitude: double
  - longitude: double
  + compareLatitude(GPS): int
  + getDistance(GPS, GPS): double
  + compareLongitude(GPS): int
  + equals(Object): boolean
  + getDistance(GPS): double
  + hashCode(): int
  + toString(): String
   latitude: double
   longitude: double
}
interface Graph<V, E> << interface >> {
  + edges(): Collection<Edge<V, E>>
  + vertex(int): V
  + vertices(): ArrayList<V>
  + inDegree(V): int
  + addEdge(V, V, E): boolean
  + validVertex(V): boolean
  + numEdges(): int
  + edge(int, int): Edge<V, E>
  + edge(V, V): Edge<V, E>
  + key(V): int
  + adjVertices(V): Collection<V>
  + vertex(Predicate<V>): V
  + outDegree(V): int
  + clone(): Graph<V, E>
  + incomingEdges(V): Collection<Edge<V, E>>
  + addVertex(V): boolean
  + removeVertex(V): boolean
  + numVertices(): int
  + removeEdge(V, V): boolean
  + outgoingEdges(V): Collection<Edge<V, E>>
   directed: boolean
}
class GraphStore {
  + GraphStore(): 
  - graph: MapGraph<Local, Integer>
  + addVertex(Local): void
  + getDistanceBetweenPairs(MapGraph, LinkedList<Local>): List<Distance>
  + getNumberOfVehicleStops(MapGraph, LinkedList<Local>, double): int
  + checkExistentDistance(List<Distance>, Local, Local): boolean
  + addEdge(Local, Local, int): void
  + clean(): boolean
  + removeEdgesAboveAutonomy(double): MapGraph<Local, Integer>
  + checkAttributesNonNull(Distance, MapGraph<Local, Integer>, double): boolean
  + getFurthestPlacesData(double): FurthestPlacesData
  + getVehicleChargeStops(MapGraph, LinkedList<Local>, double): List<Local>
  + getNumberOfVehicleCharges(MapGraph, LinkedList<Local>, double): int
  + getDistanceBetweenOriginAndDestination(MapGraph, LinkedList<Local>): double
   cloneGraph: MapGraph<Local, Integer>
   graph: MapGraph<Local, Integer>
   furthestPlaces: Distance
}
class IdealVerticesCalculator<V, E> {
  + IdealVerticesCalculator(Graph<V, E>, Comparator<E>, BinaryOperator<E>, E): 
  - neutralValue: E
  - verticesAndCentralities: Map<V, Integer>
  - comparator: Comparator<E>
  - binaryOperator: BinaryOperator<E>
  - allShortestPathsForAllVertices: Map<V, ArrayList<LinkedList<V>>>
  - graph: Graph<V, E>
  - verticesAndProximities: Map<V, E>
  - getVerticesByCentralityAndProximity(ArrayList<V>, Pair<Boolean, ArrayList<Pair<V, V>>>): ArrayList<V>
  - getVerticesByCentralityProximityAndImportance(ArrayList<V>, Pair<Boolean, ArrayList<Pair<V, V>>>): ArrayList<V>
  - checkVerticesWithSameCentralityAndProximity(Pair<Boolean, ArrayList<Pair<V, V>>>): Pair<Boolean, ArrayList<Pair<V, V>>>
  - checkVerticesWithSameCentrality(): Pair<Boolean, ArrayList<Pair<V, V>>>
   allShortestPathsForAllVertices: Map<V, ArrayList<LinkedList<V>>>
   verticesAndCentralities: Map<V, Integer>
   verticesByCentrality: ArrayList<V>
   graph: Graph<V, E>
   verticesByIdealOrder: ArrayList<V>
   binaryOperator: BinaryOperator<E>
   comparator: Comparator<E>
   verticesAndProximities: Map<V, E>
   neutralValue: E
}
class IntegerBinaryOperator {
  + IntegerBinaryOperator(): 
  + apply(Integer, Integer): Integer
}
class IntegerComparator {
  + IntegerComparator(): 
  + compare(Integer, Integer): int
}
class Local {
  + Local(String): 
  + Local(String, GPS): 
  - gps: GPS
  - localId: String
  + equals(Object): boolean
  + hashCode(): int
  + toString(): String
   gps: GPS
   localId: String
}
class MapGraph<V, E> {
  + MapGraph(Graph<V, E>): 
  + MapGraph(boolean): 
  + edges(): Collection<Edge<V, E>>
  + validVertex(V): boolean
  + addEdge(V, V, E): boolean
  + outDegree(V): int
  + clone(): MapGraph<V, E>
  + inDegree(V): int
  + incomingEdges(V): Collection<Edge<V, E>>
  + toString(): String
  + edge(V, V): Edge<V, E>
  + outgoingEdges(V): Collection<Edge<V, E>>
  + edge(int, int): Edge<V, E>
  + removeVertex(V): boolean
  + removeEdge(V, V): boolean
  + addVertex(V): boolean
  + adjVertices(V): Collection<V>
}
class MapGraphLoader {
  + MapGraphLoader(): 
  + loadGraph(String, String): boolean
}
class MapVertex<V, E> {
  + MapVertex(V): 
  - element: V
  + getEdge(V): Edge<V, E>
  + addAdjVert(V, Edge<V, E>): void
  + numAdjVerts(): int
  + remAdjVert(V): void
  + toString(): String
   allAdjVerts: Collection<V>
   allOutEdges: Collection<Edge<V, E>>
   element: V
}
class MatrixGraph<V, E> {
  + MatrixGraph(Graph<V, E>): 
  + MatrixGraph(boolean): 
  + MatrixGraph(boolean, int): 
  + MatrixGraph(boolean, ArrayList<V>, E[][]): 
  + edge(int, int): Edge<V, E>
  + addEdge(V, V, E): boolean
  + incomingEdges(V): Collection<Edge<V, E>>
  + clone(): MatrixGraph<V, E>
  + outgoingEdges(V): Collection<Edge<V, E>>
  + edges(): Collection<Edge<V, E>>
  + adjVertices(V): Collection<V>
  + addVertex(V): boolean
  - resizeMatrix(): void
  + outDegree(V): int
  - removeEdge(int, int): void
  + removeVertex(V): boolean
  + toString(): String
  + edge(V, V): Edge<V, E>
  + removeEdge(V, V): boolean
  + inDegree(V): int
}
class ReturnData {
  + ReturnData(Graph<Local, Integer>, int): 
  - graph: Graph<Local, Integer>
  - pesoTotal: int
  + toString(): String
   graph: Graph<Local, Integer>
   pesoTotal: int
}

Algorithms                    -[#595959,dashed]->  MapGraph                     : "«create»"
AlgorithmsAlternative         -[#000082,plain]-^  Algorithms                   
CalculateMinimumSpanningTree  -[#595959,dashed]->  MapGraph                     : "«create»"
CalculateMinimumSpanningTree  -[#595959,dashed]->  ReturnData                   : "«create»"
CommonGraph                   -[#008200,dashed]-^  Graph                        
Distance                     "1" *-[#595959,plain]-> "local1\n1" Local                        
FurthestPlacesData           "1" *-[#595959,plain]-> "DEFAULT_DISTANCE2\n*" Distance                     
FurthestPlacesData           "1" *-[#595959,plain]-> "DEFAULT_SHORTPATH\n*" Local                        
GraphStore                    -[#595959,dashed]->  Distance                     : "«create»"
GraphStore                    -[#595959,dashed]->  FurthestPlacesData           : "«create»"
GraphStore                   "1" *-[#595959,plain]-> "graph\n1" MapGraph                     
GraphStore                    -[#595959,dashed]->  MapGraph                     : "«create»"
IdealVerticesCalculator       -[#595959,dashed]->  CentralityComparator         : "«create»"
IdealVerticesCalculator      "1" *-[#595959,plain]-> "graph\n1" Graph                        
Local                         -[#595959,dashed]->  GPS                          : "«create»"
Local                        "1" *-[#595959,plain]-> "DEFAULT_GPS\n1" GPS                          
MapGraph                      -[#000082,plain]-^  CommonGraph                  
MapGraph                      -[#595959,dashed]->  Edge                         : "«create»"
MapGraph                     "1" *-[#595959,plain]-> "mapVertices\n*" MapVertex                    
MapGraph                      -[#595959,dashed]->  MapVertex                    : "«create»"
MapGraphLoader                -[#595959,dashed]->  GPS                          : "«create»"
MapGraphLoader                -[#595959,dashed]->  GraphStore                   : "«create»"
MapGraphLoader                -[#595959,dashed]->  Local                        : "«create»"
MapVertex                    "1" *-[#595959,plain]-> "outVerts\n*" Edge                         
MatrixGraph                   -[#000082,plain]-^  CommonGraph                  
MatrixGraph                  "1" *-[#595959,plain]-> "edgeMatrix\n*" Edge                         
MatrixGraph                   -[#595959,dashed]->  Edge                         : "«create»"
ReturnData                   "1" *-[#595959,plain]-> "graph\n1" Graph                        
@enduml
