@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'top down direction
left to right direction

'Classes
abstract class GestorAgricola {
}

class ConsultaFatoresProducao {
    parcela : Parcela
    intervaloDeTempo
    fatoresProducao : List<FatorProducao>
}

class Parcela {
    numero
}

class FatorProducao {
    tipoSubstancia
    quantidade
}

abstract class Property {
    - ownerName: String
    - price: Double
    - typeOfProperty: String
    - area: Double
    - distanceFromTheCityCenter: Double
    - photographs: String
    - registrationDate: Date
    - typeOfBusiness: String
    - city: City
    - address: Address
    - district: District
    - state: State

    + Property(ownerName: String, price: Double, typeOfProperty: String, area: Double, distanceFromTheCityCenter: Double,\n photographs: String, registrationDate: Date, typeOfBusiness: String)
    + getRegistrationDate(): Date
    + getOwnerName(): String
    + getPrice(): Double
    + getTypeOfProperty(): String
    + getArea(): Double
    + getDistanceFromTheCityCenter(): Double
    + getPhotographs(): String
    + getTypeOfBusiness(): String
    + getCity(): City
}

class Address {
}

class State {
}

class District {
}

class City {
    -name: String
    --
    +getName
}

abstract class Residence extends Property{
    - numberOfBedrooms: int
    - numberOfBathrooms: int
    - numberOfParkingSpaces: int
    - availableEquipment: String
    ---
    + Residence(ownerName: String, price: Double, typeOfProperty: String, area: Double, distanceFromTheCityCenter: Double, photographs: String, registrationDate: Date,\n typeOfBusiness: String, numberOfBedrooms: int, numberOfBathrooms: int, numberOfParkingSpaces: int, availableEquipment: String)
    + getNumberOfBedrooms(): int
    + getNumberOfBathrooms(): int
    + getNumberOfParkingSpaces(): int
    + getAvailableEquipment(): String
}

class Apartment extends Residence{
}

class House extends Residence{
    - boolean existenceOfBasement
    - boolean existenceOfInhabitableLoft
}

class Land extends Property{
}

class PropertiesRepository {
    - propertiesList: List<Property>
    --
    + getPropertiesList(): List<Property>
}

class PropertyListingController {
    - propertiesRepository: PropertiesRepository
    - comparatorByPrice: Comparator<Property>
    - comparatorByRegistrationDate: Comparator<Property>
    --
    - getPropertiesRepository(): PropertiesRepository
    + PropertyListingController() : void
    + PropertyListingController(propertiesRepository: PropertiesRepository) : void
    + getPropertiesList(): List<Property>
    + getPropertiesSortedList(propertiesListCopy: List<Property>, businessOption: String, propertyType: String,\n numberOfBedrooms: int, sortOption: String, sortOrder: char): List<Property>
}

class PropertyListingUI {
    - input: Scanner
    - controller: PropertyListingController
    - propertiesListCopy: List<Property>
    - businessOption: String
    - propertyType: String
    - numberOfBedrooms: int
    - sortOption: String
    - correctOption: boolean
    - sortOrder: char
    ----
    + getController(): PropertyListingController
    + run(): void
    - printListedProperties(propertiesListCopy: List<Property>): void
    - keepList(propertiesListCopy: List<Property>): void
    - keepBusinessOption(): void
    - keepPropertyType(): void
    - keepNumberOfBedrooms(): void
}

class Repositories {
    - Repositories()
    --
    + getInstance(): Repositories
    + getPropertiesRepository():PropertiesRepository
}

'HeranÃ§a
PropertyListingUI ..> PropertyListingController
PropertyListingController ..> Repositories
PropertyListingController .> PropertiesRepository
Repositories  .> PropertiesRepository
PropertyListingController .> Property
PropertyListingController .> Residence

Property --> Address
Address --> City
City --> District
District --> State

PropertyListingController ..> City

@enduml
